bird-EOF-byte.c

Execution stopped because a non-ASCII byte was printed.
Byte 4 of line 3 of program output was a non-ascii byte \xff
Have you accidentally printed the special EOF value getchar returns?
Here is line 3 with non-printable characters replaced with backslash-escaped equivalents:
((_\xff_))\n


Execution stopped here in main() in /home/andrewt/w/dcc/src/tests/check_output/birds/bird-EOF-byte.c at line 10:

    printf("  ___\n");
    printf(" ('v')\n");
--> printf("((_%c_))\n", EOF);
    printf(" ^   +\n");
    return 0;

bird-extra-newline.c

Execution stopped because of unexpected extra output.
The program produced all the expected output and then produced extra output.
The extra line was an empty line (a '\n').

Execution stopped here in main() in /home/andrewt/w/dcc/src/tests/check_output/birds/bird-extra-newline.c at line 11:

    printf(" ('v')\n");
    printf("((___))\n");
--> printf(" ^   ^\n\n");
    return 0;
}

bird-line-missing-1-byte.c

Execution stopped because of an incorrect output line.
Byte 7 of line 3 of program output was incorrect.
A ')' was missing from the end of the output line.
The correct output line was:
((___))
Your program printed this line:
((___)

Execution stopped here in main() in /home/andrewt/w/dcc/src/tests/check_output/birds/bird-line-missing-1-byte.c at line 10:

    printf("  ___\n");
    printf(" ('v')\n");
--> printf("((___)\n");
    printf(" ^   ^\n");
    return 0;

bird-line-too-long.c

Execution stopped because program wrote a line containing over 65536 bytes.
Do you have an infinite loop?
The start of the line was:
_______________________________________________________________________________________________________________

Execution stopped here in main() in /home/andrewt/w/dcc/src/tests/check_output/birds/bird-line-too-long.c at line 8:


int main(void) {
--> for (int i = 0;i < 100000; i++) printf("____________________________________________________________");
    return 0;
}

Values when execution stopped:

i =  <deleted-value>
bird-line-wrong.c

Execution stopped because of an incorrect output line.
Byte 4 of line 3 of program output was incorrect.
The correct output line was:
((___))
Your program printed this line:
((_+_))

Execution stopped here in main() in /home/andrewt/w/dcc/src/tests/check_output/birds/bird-line-wrong.c at line 10:

    printf("  ___\n");
    printf(" ('v')\n");
--> printf("((_+_))\n");
    printf(" ^   ^\n");
    return 0;

bird-missing-newline.c

Execution stopped because the last newline was missing.
Your program produced all the expected output, except the last newline ('\n') was missing.

bird-no-output.c

Execution stopped because program produced no output.
4 lines of output were expected
The first expected line was:
  ___

bird-truncated.c

Execution stopped because of missing output lines.
Your program printed 3 lines of correct output but stopped before printing all the expected output.
The next expected line was:
((___))

bird-zero-byte.c

Execution stopped because a zero byte ('\0') was printed.
Byte 3 of line 3 of program's output was a zero byte ('\0')
Here are the characters on the line before the zero byte:
((_

Execution stopped here in main() in /home/andrewt/w/dcc/src/tests/check_output/birds/bird-zero-byte.c at line 10:

    printf("  ___\n");
    printf(" ('v')\n");
--> printf("((_%c_))\n", 0);
    printf(" ^   +\n");
    return 0;

All Tests Correct
