
Execution stopped because program produced no output.
1 lines of output were expected
The first expected line was:
Hello!


Execution stopped because of an incorrect output line.
Byte 7 of line 1 of program output was incorrect.
The correct output line was:
Hello!
Your program printed this line:
Hello!   

Execution stopped here in main(argc=2, argv=0x<deleted-hexadecimal-constant>) in tmp.c at line 2:

int main(int argc, char *argv[]) {printf("%s", argv[1]);return 0;}
#include <stdio.h>
-->int main(int argc, char *argv[]) {printf("%s", argv[1]);return 0;}

Values when execution stopped:

argc =  <deleted-value>
argv[1] =  <deleted-value>

Execution stopped because of unexpected extra output.
The program produced all the expected output and then produced extra output.
The extra line was an empty line (a '\n').

Execution stopped here in main(argc=2, argv=0x<deleted-hexadecimal-constant>) in tmp.c at line 2:

int main(int argc, char *argv[]) {printf("%s", argv[1]);return 0;}
#include <stdio.h>
-->int main(int argc, char *argv[]) {printf("%s", argv[1]);return 0;}

Values when execution stopped:

argc =  <deleted-value>
argv[1] =  <deleted-value>

Execution stopped because the last newline was missing.
Your program produced all the expected output, except the last newline ('\n') was missing.


Execution stopped because of an incorrect output line.
Byte 1 of line 1 of program output was incorrect.
The correct output line was:
Hello!
Your program printed this line:
hEllo!

Execution stopped here in main(argc=2, argv=0x<deleted-hexadecimal-constant>) in tmp.c at line 2:

int main(int argc, char *argv[]) {printf("%s", argv[1]);return 0;}
#include <stdio.h>
-->int main(int argc, char *argv[]) {printf("%s", argv[1]);return 0;}

Values when execution stopped:

argc =  <deleted-value>
argv[1] =  <deleted-value>

Execution stopped because of an incorrect output line.
Byte 2 of line 1 of program output was incorrect.
The correct output line was:
Hello!
Your program printed this line:
H ello\t!

Execution stopped here in main(argc=2, argv=0x<deleted-hexadecimal-constant>) in tmp.c at line 2:

int main(int argc, char *argv[]) {printf("%s", argv[1]);return 0;}
#include <stdio.h>
-->int main(int argc, char *argv[]) {printf("%s", argv[1]);return 0;}

Values when execution stopped:

argc =  <deleted-value>
argv[1] =  <deleted-value>

Execution stopped because of an incorrect output line.
Byte 4 of line 1 of program output was incorrect.
The characters you printed were correct, but more characters were expected.
The correct output line was:
Hello!
Your program printed this line:
Hen

Execution stopped here in main(argc=2, argv=0x<deleted-hexadecimal-constant>) in tmp.c at line 2:

int main(int argc, char *argv[]) {printf("%s", argv[1]);return 0;}
#include <stdio.h>
-->int main(int argc, char *argv[]) {printf("%s", argv[1]);return 0;}

Values when execution stopped:

argc =  <deleted-value>
argv[1] =  <deleted-value>

Execution stopped because of an incorrect output line.
Byte 5 of line 1 of program output was incorrect.
The correct output line was:
Hello!
Your program printed this line:
HiheHilloHi\t!

Execution stopped here in main(argc=2, argv=0x<deleted-hexadecimal-constant>) in tmp.c at line 2:

int main(int argc, char *argv[]) {printf("%s", argv[1]);return 0;}
#include <stdio.h>
-->int main(int argc, char *argv[]) {printf("%s", argv[1]);return 0;}

Values when execution stopped:

argc =  <deleted-value>
argv[1] =  <deleted-value>

Execution stopped because of an incorrect output line.
Byte 3 of line 1 of program output was incorrect.
The correct output line was:
Hello!
Your program printed this line:
HiheHilloHi\t!

Execution stopped here in main(argc=2, argv=0x<deleted-hexadecimal-constant>) in tmp.c at line 2:

int main(int argc, char *argv[]) {printf("%s", argv[1]);return 0;}
#include <stdio.h>
-->int main(int argc, char *argv[]) {printf("%s", argv[1]);return 0;}

Values when execution stopped:

argc =  <deleted-value>
argv[1] =  <deleted-value>
